{"version":3,"sources":["Components/ContactList/ContactListItem/ContactListItem.module.css","Components/Filter/Filter.module.css","Components/ContactList/ContactList.module.css","redux/contacts/contactsSelectors.js","servises/contactsApi.js","redux/contacts/contactsOperations.js","Components/ContactList/ContactListItem/ContactListItem.js","Components/ContactList/ContactList.js","Components/ContactForm/ContactForm.js","redux/contacts/contactsActions.js","Components/Filter/Filter.js","Components/App/App.js","redux/contacts/contactsReducer.js","redux/store.js","index.js","Components/ContactForm/Contacts.module.css"],"names":["module","exports","getContacts","state","contacts","getVisibleContact","createSelector","filter","normalizedFilter","toLowerCase","contact","name","includes","phone","addContactsInApi","a","axios","post","data","getContactsFromApi","get","deleteContactsFromApi","id","delete","defaults","baseURL","fetchContacts","createAsyncThunk","contactsApi","addContacts","deleteContacts","ContactItem","number","dispatch","useDispatch","className","s","listItem","listItemText","button","type","onClick","ContactList","useSelector","useEffect","list","map","InputForm","useState","setName","setNumber","handleChange","e","currentTarget","value","form","onSubmit","preventDefault","alert","label","input","pattern","title","required","onChange","btnText","filterContacts","createAction","Filter","filteredID","shortid","generate","htmlFor","filterLabel","target","filterInput","App","contactsReducer","createReducer","fulfilled","payload","_","filterReducer","loading","pending","rejected","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactReducer","devTools","process","ReactDom","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1413bcd0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactListItem_listItem__2yqNO\",\"listItemText\":\"ContactListItem_listItemText__1y59s\",\"button\":\"ContactListItem_button__qpOuc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterLabel\":\"Filter_filterLabel__2ZNSx\",\"filterInput\":\"Filter_filterInput__AdX91\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2cE9S\"};","\nimport { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = (state) => state.contacts;\nexport const getFilter = (state) => state.filter;\n\nexport const getVisibleContact = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(\n      (contact) =>\n        contact.name.toLowerCase().includes(normalizedFilter) ||\n        contact.phone.includes(filter),\n    );\n  },\n);","import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://61957e7e74c1bd00176c6d8c.mockapi.io';\n\n\nexport async function addContactsInApi(contact) {\n  const { data } = await axios.post('/contacts', contact);\n  return data;\n}\nexport async function getContactsFromApi() {\n  const { data } = await axios.get('/contacts');\n  return data;\n}\n\nexport async function deleteContactsFromApi(id) {\n  const { data } = await axios.delete(`/contacts/${id}`);\n  return data;\n}\n","import * as contactsApi  from '../../servises/contactsApi';\nimport { createAsyncThunk } from '@reduxjs/toolkit';\n\n\nexport const fetchContacts = createAsyncThunk(\n  'contact/fetchContacts',\n  async () => {\n    const contacts = await contactsApi.getContactsFromApi();\n    return contacts;\n  },\n);\n\nexport const addContacts = createAsyncThunk(\n  'contact/addContacts',\n  async (contact) => {\n    const data = await contactsApi.addContactsInApi(contact);\n    return data;\n  },\n);\n\nexport const deleteContacts = createAsyncThunk(\n  'contact/deleteContacts',\n  async (id) => {\n    await contactsApi.deleteContactsFromApi(id);\n    return id;\n  },\n);\n","import { deleteContacts } from '../../../redux/contacts/contactsOperations';\nimport s from './ContactListItem.module.css'\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nexport default function ContactItem({ id, name, number }) {\n    const dispatch = useDispatch();\n    return (\n        <>\n            <li className={s.listItem}>\n                <span className={s.listItemText}>{name}</span>\n                <span className={s.listItemText}>{number}</span>\n                    <button className={s.button} type=\"button\" onClick={() => dispatch(deleteContacts(id))} >Delete</button>    \n                </li>\n            </>\n        )\n};\n\nContactItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n   \n};","import { getVisibleContact } from '../../redux/contacts/contactsSelectors';\nimport { fetchContacts } from '../../redux/contacts/contactsOperations';\nimport ContactItem from './ContactListItem/ContactListItem'\nimport { useSelector, useDispatch } from 'react-redux';\nimport s from \"./ContactList.module.css\";\nimport PropTypes from 'prop-types';\nimport { useEffect } from 'react';\n\nexport default function ContactList() {\n    const contacts = useSelector(getVisibleContact);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    return (\n        <ul className={s.list}> {\n            contacts.map(({ id, name, number }) => (\n                <ContactItem\n                    key={id}\n                    id={id}\n                    name={name}\n                    number={number}\n          \n                />\n            ))\n        }\n       \n            </ul> \n    );\n};\nContactList.propTypes = {\n    contacts: PropTypes.array,\n}","import { addContacts } from '../../redux/contacts/contactsOperations';\nimport { getContacts } from '../../redux/contacts/contactsSelectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport s from './Contacts.module.css';\nimport { useState } from 'react';\n\n\nexport default function InputForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => getContacts(state));\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n   \n      if (contacts.map(contact => contact.name).includes(name)) {\n      alert(`Sorry,  ${name} is already in contacs.`);\n      return;\n    }\n   \n  \n   const addContactOnSubmit = {\n     name,\n     number,\n   }\n   dispatch(addContacts(addContactOnSubmit));\n    setName('');\n    setNumber('');\n\n  };\n\n  return (\n    <div className={s.form}>\n      <form onSubmit={handleSubmit} >\n        <label className={s.label} >\n          Name\n          <input className={s.input}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={name}\n            onChange={handleChange}\n          />\n        </label>\n        <label className={s.label} >\n          Number\n          <input className={s.input}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={number}\n            onChange={handleChange}\n          />\n        </label>\n        <button className={s.button} type=\"submit\">\n          <span className={s.btnText}>Add contact</span>\n          </button>\n      </form>\n    </div>\n  )\n}\n\n\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const filterContacts = createAction('contact-filter');","import { filterContacts } from \"../../redux/contacts/contactsActions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport s from './Filter.module.css';\nimport shortid from \"shortid\";\n\nexport default function Filter() {\n    const filter = useSelector(state => state.filter);\n    const dispatch = useDispatch();\n    const filteredID = shortid.generate();\n    return (\n        <>\n            <label htmlFor={filteredID} className={s.filterLabel}>\n            <h3>Find contacts by name</h3>\n                <input type=\"text\"\n                    id={filteredID}\n                    value={filter}\n                    onChange={e => dispatch(filterContacts(e.target.value))}\n                    className={s.filterInput}\n                \n                />\n            \n            </label>\n        </>\n    );\n};\n\n","import { ContactList } from '../ContactList';\nimport InputForm from '../ContactForm';\nimport Filter from '../Filter';\nimport './app.scss';\n\n\n\nexport default function App() {\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <InputForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n  </>\n  );\n}\n","import { createReducer, combineReducers } from '@reduxjs/toolkit';\nimport { filterContacts } from './contactsActions';\nimport {\n  fetchContacts,\n  deleteContacts,\n  addContacts,\n} from './contactsOperations';\n\nconst contactsReducer = createReducer([], {\n  \n  [addContacts.fulfilled]: (state, { payload }) => [...state, payload],\n  \n  [deleteContacts.fulfilled]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n \n  [fetchContacts.fulfilled]: (_, { payload }) => payload,\n});\n\nconst filterReducer = createReducer('', {\n  [filterContacts]: (_, { payload }) => payload,\n});\n\nconst loading = createReducer(false, {\n \n  [addContacts.pending]: () => true,\n  [addContacts.rejected]: () => false,\n  [addContacts.fulfilled]: () => false,\n\n  [deleteContacts.pending]: () => true,\n  [deleteContacts.rejected]: () => false,\n  [deleteContacts.fulfilled]: () => false,\n  \n  [fetchContacts.pending]: () => true,\n  [fetchContacts.rejected]: () => false,\n  [fetchContacts.fulfilled]: () => false,\n});\n\nexport default combineReducers({\n  contacts: contactsReducer,\n  filter: filterReducer,\n  loading,\n});","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport contactReducer from './contacts/contactsReducer';\nimport { logger } from 'redux-logger';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nexport const store = configureStore({\n  reducer: contactReducer,\n  middleware,\n  devTools:  process.env.NODE_ENV === 'development',\n});","import App from './Components/App/App';\nimport { store } from './redux/store';\nimport { Provider } from 'react-redux';\nimport ReactDom from 'react-dom';\nimport React from 'react';\nimport './index.css';\n\nReactDom.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Contacts_form__2hfAr\",\"label\":\"Contacts_label__LzAMT\",\"input\":\"Contacts_input__1poBn\",\"button\":\"Contacts_button__3NsEU\"};"],"sourceRoot":""}